#pragma once

#include "synth_module.h"
#include "delay.h"

namespace vital {

    /**
     * @brief A flanger effect module using a modulated delay line to produce comb-filter-like sweeps.
     *
     * The FlangerModule modulates the delay time with a low-frequency signal (derived from a frequency parameter)
     * to create classic flanging effects. It provides controls for frequency, depth, center delay time, feedback,
     * and wet/dry mix. The module uses a StereoDelay processor for implementing the actual time-delay.
     */
    class FlangerModule : public SynthModule {
    public:
        // Maximum semitone offset and delay range for the flanger effect.
        static constexpr mono_float kMaxFlangerSemitoneOffset = 24.0f;
        static constexpr mono_float kFlangerDelayRange = 0.01f;
        static constexpr mono_float kFlangerCenter = kFlangerDelayRange * 0.5f + 0.0005f;
        static constexpr mono_float kModulationDelayBuffer = 0.0005f;

        /**
         * @brief Indices of outputs generated by the FlangerModule.
         *
         * - kAudioOutput: The processed flanged audio output.
         * - kFrequencyOutput: The dynamically updated delay frequency, used internally for debug or analysis.
         */
        enum {
            kAudioOutput,
            kFrequencyOutput,
            kNumOutputs
        };

        /**
         * @brief Constructs a FlangerModule linked to a beats-per-second output for tempo syncing.
         *
         * @param beats_per_second An Output pointer providing tempo (in beats per second) for optional sync.
         */
        FlangerModule(const Output* beats_per_second);

        /**
         * @brief Destroys the FlangerModule and releases associated resources.
         */
        virtual ~FlangerModule();

        /**
         * @brief Initializes the FlangerModule by creating parameters and setting up the internal delay line.
         */
        void init() override;

        /**
         * @brief Performs a hard reset of the flanger's delay line, clearing any internal buffers.
         */
        void hardReset() override { delay_->hardReset(); }

        /**
         * @brief Enables or disables the module, resetting the delay if disabled.
         *
         * When enabling, it processes a single sample to initialize states. When disabling, it clears the delay line.
         *
         * @param enable True to enable, false to disable.
         */
        void enable(bool enable) override {
            SynthModule::enable(enable);
            process(1);
            if (!enable)
                delay_->hardReset();
        }

        /**
         * @brief Processes audio through the flanger effect using the input buffer and number of samples.
         *
         * It updates the modulation phase based on the frequency, calculates the current delay time based on center
         * and depth parameters, and updates the StereoDelay processor to produce the flanging effect.
         *
         * @param audio_in Pointer to the input audio samples.
         * @param num_samples The number of samples to process.
         */
        void processWithInput(const poly_float* audio_in, int num_samples) override;

        /**
         * @brief Adjusts the internal modulation phase to align with a given time, useful for syncing to host time.
         *
         * @param seconds The time in seconds to which the flanger's modulation should be aligned.
         */
        void correctToTime(double seconds) override;

        /**
         * @brief The FlangerModule does not currently support cloning.
         * @return A null pointer.
         */
        Processor* clone() const override { VITAL_ASSERT(false); return nullptr; }

    protected:
        const Output* beats_per_second_; ///< Reference output for tempo sync.
        Output* frequency_;              ///< The flanger frequency parameter (possibly tempo-synced).
        Output* phase_offset_;           ///< Controls stereo phase offset for left/right channels.
        Output* center_;                 ///< Controls the central delay time around which modulation occurs.
        Output* mod_depth_;              ///< Controls the depth (amount) of modulation applied to the delay time.
        poly_float phase_;               ///< Current modulation phase.

        cr::Value delay_frequency_;      ///< Internal parameter representing the current delay frequency set in StereoDelay.
        StereoDelay* delay_;             ///< The stereo delay line used to create the flanging effect.

        JUCE_LEAK_DETECTOR(FlangerModule)
    };
} // namespace vital
